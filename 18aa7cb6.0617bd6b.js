(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{163:function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,f=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?r.a.createElement(f,i(i({ref:t},l),{},{components:n})):r.a.createElement(f,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(163)),s={title:"Storage"},i={unversionedId:"api/cookbook/storage",id:"api/cookbook/storage",isDocsHomePage:!1,title:"Storage",description:"Here you will find snippets for working with storage.",source:"@site/docs/api/cookbook/storage.md",slug:"/api/cookbook/storage",permalink:"/docs/api/cookbook/storage",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api/cookbook/storage.md",version:"current",sidebar:"reference",previous:{title:"Blocks",permalink:"/docs/api/cookbook/blocks"},next:{title:"Transactions",permalink:"/docs/api/cookbook/tx"}},c=[{value:"How do I check for storage existence?",id:"how-do-i-check-for-storage-existence",children:[]},{value:"How do I use .entries()/.keys() on double maps?",id:"how-do-i-use-entrieskeys-on-double-maps",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,"Here you will find snippets for working with storage."),Object(o.a)("h2",{id:"how-do-i-check-for-storage-existence"},"How do I check for storage existence?"),Object(o.a)("p",null,"In the metadata, for each storage item a fallback is provided. This means that when an entry does not exist, the fallback (which is the default value for the type) will be provided. This means, that querying for a non-existent key (unless an option), will yield a value -"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// retrieve Option<StakingLedger>\nconst ledger = await api.query.staking.ledger('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n// retrieve ValidatorPrefs (will yield the default value)\nconst prefs = await api.query.staking.validators('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(ledger.isNone, ledger.isSome); // true, false\nconsole.log(JSON.stringify(prefs.toHuman())); // {\"commission\":\"0\"}\n")),Object(o.a)("p",null,"In the second case, the non-existent prefs returns the default/fallback value for the storage item. So in this case we don't know if the value is set to 0 or unset. Existence can be checked by using the storage size, which would be zero if nothing is stored."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// exists\nconst sizeY = await api.query.staking.validators.size('DB2mp5nNhbFN86J9hxoAog8JALMhDXgwvWMxrRMLNUFMEY4');\n// non existent\nconst sizeN = await api.query.staking.validators.size('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(sizeY.isZero(), sizeY.toNumber()); // false 4\nconsole.log(sizeN.isZero(), sizeY.toNumber()); // true 0\n")),Object(o.a)("h2",{id:"how-do-i-use-entrieskeys-on-double-maps"},"How do I use .entries()/.keys() on double maps?"),Object(o.a)("p",null,"As ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/start/api.query.other#map-keys-entries"}),"explained elsewhere")," each map-type storage entry exposes the entries/keys helpers to retrieve the whole list. In the case of double maps, with the addition of a single argument, you can retrieve either all entries or a subset based on the first map key."),Object(o.a)("p",null,"In both these cases, entries/keys operate the same way, ",Object(o.a)("inlineCode",{parentName:"p"},".entries()")," retrieving ",Object(o.a)("inlineCode",{parentName:"p"},"(StorageKey, Codec)[]")," and ",Object(o.a)("inlineCode",{parentName:"p"},".keys()")," retrieving ",Object(o.a)("inlineCode",{parentName:"p"},"StorageKey[]")),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Retrieves the entries for all slashes, in all eras (no arg)\nconst allEntries = await api.query.staking.nominatorSlashInEra.entries();\n\n// nominatorSlashInEra(EraIndex, AccountId) for the types of the key args\nallEntries.forEach(([{ args: [era, nominatorId] }, value]) => {\n  console.log(`${era}: ${nominatorId} slashed ${value.toHuman()}`);\n});\n")),Object(o.a)("p",null,"While we can retrieve only the keys for a specific era, using a argument for the first part of the doublemap (as defined here, an ",Object(o.a)("inlineCode",{parentName:"p"},"EraIndex"),") -"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Retrieves the keys for the slashed validators in era 652\nconst slashedKeys = await api.query.staking.nominatorSlashInEra.keys(652);\n\n// key args still contains [EraIndex, AccountId] decoded\nconsole.log(`slashed: ${slashedKeys.map(({ args: [era, nominatorId] }) => nominatorId)`);\n")))}p.isMDXComponent=!0}}]);