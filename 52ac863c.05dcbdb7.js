(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{165:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return f}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),l=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=l(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return a?n.a.createElement(f,i(i({ref:t},p),{},{components:a})):n.a.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=a[p];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return l}));var r=a(2),n=a(6),o=(a(0),a(165)),c={title:"Read storage, at a specific blockhash"},i={unversionedId:"api/examples/promise/read-storage-at",id:"api/examples/promise/read-storage-at",isDocsHomePage:!1,title:"Read storage, at a specific blockhash",description:"In addition to querying the latest storage, you can make storage queries at a specific blockhash. Be aware that the node applies a pruning strategy and typically only keeps the last 256 blocks, unless run in archive mode.",source:"@site/docs/api/examples/promise/read-storage-at.md",slug:"/api/examples/promise/read-storage-at",permalink:"/docs/api/examples/promise/read-storage-at",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api/examples/promise/read-storage-at.md",version:"current",sidebar:"reference",previous:{title:"Read storage",permalink:"/docs/api/examples/promise/read-storage"},next:{title:"Make a simple transfer",permalink:"/docs/api/examples/promise/make-transfer"}},s=[],p={rightToc:s};function l(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In addition to querying the latest storage, you can make storage queries at a specific blockhash. Be aware that the node applies a pruning strategy and typically only keeps the last 256 blocks, unless run in archive mode."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"// Import the API\nconst { ApiPromise } = require('@polkadot/api');\n\n// Our address for Alice on the dev chain\nconst ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\nconst BOB = '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty';\n\nasync function main () {\n  // Create our API with a default connection to the local node\n  const api = await ApiPromise.create();\n\n  // Retrieve the last block header, extracting the hash and parentHash\n  const { hash, parentHash } = await api.rpc.chain.getHeader();\n\n  console.log(`last header hash ${hash.toHex()}`);\n\n  // Retrieve the balance at the preceding block for Alice. For at queries\n  // the format is always `.at(<blockhash>, ...params)`\n  const balance = await api.query.system.account.at(parentHash, ALICE);\n\n  console.log(`Alice's balance at ${parentHash.toHex()} was ${balance.data.free}`);\n\n  // Now perform a multi query, returning multiple balances at once\n  const balances = await api.query.system.account.multi([ALICE, BOB]);\n\n  console.log(`Current balances for Alice and Bob are ${balances[0].data.free} and ${balances[1].data.free}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}l.isMDXComponent=!0}}]);