(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(2),o=t(6),r=(t(0),t(163)),s={title:"Cookbook",slug:"/extension/cookbook"},i={unversionedId:"extension/cookbook",id:"extension/cookbook",isDocsHomePage:!1,title:"Cookbook",description:"A set of code snippets ready to be used.",source:"@site/docs/extension/cookbook.md",slug:"/extension/cookbook",permalink:"/docs/extension/cookbook",editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/extension/cookbook.md",version:"current",sidebar:"reference",previous:{title:"Usage",permalink:"/docs/extension/usage"}},c=[{value:"Get all extensions accounts",id:"get-all-extensions-accounts",children:[]},{value:"Sign a message",id:"sign-a-message",children:[]},{value:"Sign and send a transaction",id:"sign-and-send-a-transaction",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.a)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.a)("p",null,"A set of code snippets ready to be used."),Object(r.a)("h2",{id:"get-all-extensions-accounts"},"Get all extensions accounts"),Object(r.a)("p",null,"A dapp will not be aware whether or not the user has the extension installed on their browser until the ",Object(r.a)("inlineCode",{parentName:"p"},"web3Enable")," function is called.\nCalling this function returns the amount of extensions installed and for which the user has accepted to share their accounts."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\n\n// this call fires up the authorization popup\nconst extensions = await web3Enable('my cool dapp');\n\nif (extensions.length === 0) {\n    // no extension installed, or the user did not accept the authorization\n    // in this case we should inform the use and give a link to the extension\n    return;\n}\n\n// we are now informed that the user has at least one extension and that we\n// will be able to show and use accounts\nconst allAccounts = await web3Accounts();\n")),Object(r.a)("h2",{id:"sign-a-message"},"Sign a message"),Object(r.a)("p",null,"Here is an example on how to sign a message with an account that was injected by the extension."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// We arbitraily select the first account returned from the above snippet\n// `account` is of type InjectedAccountWithMeta \nconst account = allAccount[0];\n\n// to be able to retrieve the signer interface from this account\n// we can use web3FromSource which will return an InjectedExtension type\nconst injector = await web3FromSource(account.meta.source);\n\n\n// this injector object has a signer and a signRaw method\n// to be able to sign raw bytes\nconst signRaw = injector?.signer?.signRaw;\n\nif (!!signRaw) {\n    // after making sure that signRaw is defined\n    // we can use it to sign our message\n    const { signature } = await signRaw({\n        account.address,\n        data: stringToHex('message to sign'),\n        type: 'bytes'\n    });\n}\n")),Object(r.a)("p",null,"Head to the relevant ",Object(r.a)("a",Object(a.a)({parentName:"p"},{href:"/util-crypto/examples/verify-signature"}),"util-crypto")," example to see how to verify a signature."),Object(r.a)("h2",{id:"sign-and-send-a-transaction"},"Sign and send a transaction"),Object(r.a)("p",null,"The api is able to retrieve the signer when ",Object(r.a)("inlineCode",{parentName:"p"},"signAndSend")," is called with the address from an account retrieved from the extension."),Object(r.a)("pre",null,Object(r.a)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// We arbitraily select the first account returned from the above snippet\n// `account` is of type InjectedAccountWithMeta \nconst account = allAccount[0];\n\n// here we use the api to create a balance transfer to some account of a value of 12344\nconst transferExtrinsic = api.tx.balances.transfer('5C5555yEXUcmEJ5kkcCMvdZjUo7NGJiQJMS7vZXEeoMhj3VQ', 123456)\n\n// to be able to retrieve the signer interface from this account\n// we can use web3FromSource which will return an InjectedExtension type\nconst injector = await web3FromSource(account.meta.source);\n\n// passing the injected account address as the first argument of signAndSend\n// will allow the api to retrieve the signer and the user will see the extension\n// popup asking to sign the balance transfer transaction\ntransferExtrinsic.signAndSend(account.address, { signer: injector.signer }, ({ status }) => {\n    if (status.isInBlock) {\n        console.log(`Completed at block hash #${status.asInBlock.toString()}`);\n    } else {\n        console.log(`Current status: ${status.type}`);\n    }\n}).catch((error: any) => {\n    console.log(':( transaction failed', error);\n});\n")))}u.isMDXComponent=!0},163:function(e,n,t){"use strict";t.d(n,"a",(function(){return b}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),u=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),b=a,h=d["".concat(s,".").concat(b)]||d[b]||p[b]||r;return t?o.a.createElement(h,i(i({ref:n},l),{},{components:t})):o.a.createElement(h,i({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);